
Cwiczenia.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fe  00800100  00000352  000003e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000352  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  008002fe  008002fe  000005e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001173  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000862  00000000  00000000  000018a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000738  00000000  00000000  00002109  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00002844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fa  00000000  00000000  00002a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b1f  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003b5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3f       	cpi	r26, 0xFE	; 254
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	ae ef       	ldi	r26, 0xFE	; 254
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 3f       	cpi	r26, 0xFD	; 253
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 22 01 	call	0x244	; 0x244 <main>
  9e:	0c 94 a7 01 	jmp	0x34e	; 0x34e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SPI_init>:
{
	
}

void turn_Left()
{
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8c 62       	ori	r24, 0x2C	; 44
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	8c b5       	in	r24, 0x2c	; 44
  ae:	80 65       	ori	r24, 0x50	; 80
  b0:	8c bd       	out	0x2c, r24	; 44
  b2:	08 95       	ret

000000b4 <Spi_Master_Write>:
  b4:	8e bd       	out	0x2e, r24	; 46
  b6:	00 00       	nop
  b8:	0d b4       	in	r0, 0x2d	; 45
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <Spi_Master_Write+0x4>
  be:	8e b5       	in	r24, 0x2e	; 46
  c0:	08 95       	ret

000000c2 <LCD_Set_Bias>:
  c2:	9b b1       	in	r25, 0x0b	; 11
  c4:	9b 7e       	andi	r25, 0xEB	; 235
  c6:	9b b9       	out	0x0b, r25	; 11
  c8:	24 e0       	ldi	r18, 0x04	; 4
  ca:	82 9f       	mul	r24, r18
  cc:	c0 01       	movw	r24, r0
  ce:	11 24       	eor	r1, r1
  d0:	40 61       	ori	r20, 0x10	; 16
  d2:	24 2f       	mov	r18, r20
  d4:	28 2b       	or	r18, r24
  d6:	86 2f       	mov	r24, r22
  d8:	88 0f       	add	r24, r24
  da:	82 2b       	or	r24, r18
  dc:	0e 94 5a 00 	call	0xb4	; 0xb4 <Spi_Master_Write>
  e0:	5c 9a       	sbi	0x0b, 4	; 11
  e2:	08 95       	ret

000000e4 <LCD_Disp_Blank>:
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8b 7e       	andi	r24, 0xEB	; 235
  e8:	8b b9       	out	0x0b, r24	; 11
  ea:	88 e0       	ldi	r24, 0x08	; 8
  ec:	0e 94 5a 00 	call	0xb4	; 0xb4 <Spi_Master_Write>
  f0:	5c 9a       	sbi	0x0b, 4	; 11
  f2:	08 95       	ret

000000f4 <LCD_Disp_Normal>:
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	8b 7e       	andi	r24, 0xEB	; 235
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	0e 94 5a 00 	call	0xb4	; 0xb4 <Spi_Master_Write>
 100:	5c 9a       	sbi	0x0b, 4	; 11
 102:	08 95       	ret

00000104 <LCD_Set_Y>:
 104:	9b b1       	in	r25, 0x0b	; 11
 106:	9b 7e       	andi	r25, 0xEB	; 235
 108:	9b b9       	out	0x0b, r25	; 11
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	0e 94 5a 00 	call	0xb4	; 0xb4 <Spi_Master_Write>
 110:	5c 9a       	sbi	0x0b, 4	; 11
 112:	08 95       	ret

00000114 <LCD_Set_Instruction>:
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	9b 7e       	andi	r25, 0xEB	; 235
 118:	9b b9       	out	0x0b, r25	; 11
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	0e 94 5a 00 	call	0xb4	; 0xb4 <Spi_Master_Write>
 120:	5c 9a       	sbi	0x0b, 4	; 11
 122:	08 95       	ret

00000124 <LCD_Set_TempC>:
 124:	9b b1       	in	r25, 0x0b	; 11
 126:	9b 7e       	andi	r25, 0xEB	; 235
 128:	9b b9       	out	0x0b, r25	; 11
 12a:	88 0f       	add	r24, r24
 12c:	64 60       	ori	r22, 0x04	; 4
 12e:	86 2b       	or	r24, r22
 130:	0e 94 5a 00 	call	0xb4	; 0xb4 <Spi_Master_Write>
 134:	5c 9a       	sbi	0x0b, 4	; 11
 136:	08 95       	ret

00000138 <LCD_Render>:
 138:	ff 92       	push	r15
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	c6 e0       	ldi	r28, 0x06	; 6
 144:	d1 e0       	ldi	r29, 0x01	; 1
 146:	f1 2c       	mov	r15, r1
 148:	8f 2d       	mov	r24, r15
 14a:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Set_Y>
 14e:	5a 9a       	sbi	0x0b, 2	; 11
 150:	5c 98       	cbi	0x0b, 4	; 11
 152:	8e 01       	movw	r16, r28
 154:	0c 5a       	subi	r16, 0xAC	; 172
 156:	1f 4f       	sbci	r17, 0xFF	; 255
 158:	89 91       	ld	r24, Y+
 15a:	0e 94 5a 00 	call	0xb4	; 0xb4 <Spi_Master_Write>
 15e:	c0 17       	cp	r28, r16
 160:	d1 07       	cpc	r29, r17
 162:	d1 f7       	brne	.-12     	; 0x158 <LCD_Render+0x20>
 164:	5c 9a       	sbi	0x0b, 4	; 11
 166:	f3 94       	inc	r15
 168:	e8 01       	movw	r28, r16
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	f8 12       	cpse	r15, r24
 16e:	ec cf       	rjmp	.-40     	; 0x148 <LCD_Render+0x10>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Set_Y>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	08 95       	ret

00000182 <LCD_Nokia_init>:
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	88 61       	ori	r24, 0x18	; 24
 186:	8b b9       	out	0x0b, r24	; 11
 188:	8a b1       	in	r24, 0x0a	; 10
 18a:	8c 61       	ori	r24, 0x1C	; 28
 18c:	8a b9       	out	0x0a, r24	; 10
 18e:	8f e3       	ldi	r24, 0x3F	; 63
 190:	9c e9       	ldi	r25, 0x9C	; 156
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Nokia_init+0x10>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Nokia_init+0x16>
 198:	00 00       	nop
 19a:	5c 98       	cbi	0x0b, 4	; 11
 19c:	5b 98       	cbi	0x0b, 3	; 11
 19e:	9f e7       	ldi	r25, 0x7F	; 127
 1a0:	25 eb       	ldi	r18, 0xB5	; 181
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	91 50       	subi	r25, 0x01	; 1
 1a6:	20 40       	sbci	r18, 0x00	; 0
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <LCD_Nokia_init+0x22>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Nokia_init+0x2c>
 1ae:	00 00       	nop
 1b0:	5b 9a       	sbi	0x0b, 3	; 11
 1b2:	5c 9a       	sbi	0x0b, 4	; 11
 1b4:	0e 94 53 00 	call	0xa6	; 0xa6 <SPI_init>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Set_Instruction>
 1be:	8b b1       	in	r24, 0x0b	; 11
 1c0:	8b 7e       	andi	r24, 0xEB	; 235
 1c2:	8b b9       	out	0x0b, r24	; 11
 1c4:	8c eb       	ldi	r24, 0xBC	; 188
 1c6:	0e 94 5a 00 	call	0xb4	; 0xb4 <Spi_Master_Write>
 1ca:	5c 9a       	sbi	0x0b, 4	; 11
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Set_TempC>
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_Set_Bias>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Set_Instruction>
 1e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_Disp_Normal>
 1e8:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_Render>
 1ec:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_Disp_Blank>
 1f0:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_Disp_Normal>
 1f4:	08 95       	ret

000001f6 <LCD_Clear>:
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	88 ef       	ldi	r24, 0xF8	; 248
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	e2 2f       	mov	r30, r18
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	ea 5f       	subi	r30, 0xFA	; 250
 206:	fe 4f       	sbci	r31, 0xFE	; 254
 208:	10 82       	st	Z, r1
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	2f 5f       	subi	r18, 0xFF	; 255
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	b9 f7       	brne	.-18     	; 0x200 <LCD_Clear+0xa>
 212:	c0 e0       	ldi	r28, 0x00	; 0
 214:	d3 e0       	ldi	r29, 0x03	; 3
 216:	88 ef       	ldi	r24, 0xF8	; 248
 218:	8a 83       	std	Y+2, r24	; 0x02
 21a:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_Render>
 21e:	1a 82       	std	Y+2, r1	; 0x02
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <impulsator_Init>:
 226:	8a b1       	in	r24, 0x0a	; 10
 228:	8f 73       	andi	r24, 0x3F	; 63
 22a:	8a b9       	out	0x0a, r24	; 10
 22c:	21 98       	cbi	0x04, 1	; 4
 22e:	ed e6       	ldi	r30, 0x6D	; 109
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 6c       	ori	r24, 0xC0	; 192
 236:	80 83       	st	Z, r24
 238:	e8 e6       	ldi	r30, 0x68	; 104
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	80 83       	st	Z, r24
 242:	08 95       	ret

00000244 <main>:
 244:	c0 e0       	ldi	r28, 0x00	; 0
 246:	d3 e0       	ldi	r29, 0x03	; 3
 248:	1c 82       	std	Y+4, r1	; 0x04
 24a:	1a 82       	std	Y+2, r1	; 0x02
 24c:	18 82       	st	Y, r1
 24e:	0e 94 c1 00 	call	0x182	; 0x182 <LCD_Nokia_init>
 252:	0e 94 13 01 	call	0x226	; 0x226 <impulsator_Init>
 256:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_Render>
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	83 ed       	ldi	r24, 0xD3	; 211
 25e:	90 e3       	ldi	r25, 0x30	; 48
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x1c>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x26>
 26a:	00 00       	nop
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	c0 e0       	ldi	r28, 0x00	; 0
 270:	d1 e0       	ldi	r29, 0x01	; 1
 272:	96 e0       	ldi	r25, 0x06	; 6
 274:	98 0f       	add	r25, r24
 276:	de 01       	movw	r26, r28
 278:	2d 91       	ld	r18, X+
 27a:	e8 2f       	mov	r30, r24
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	ea 5f       	subi	r30, 0xFA	; 250
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	20 83       	st	Z, r18
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	89 13       	cpse	r24, r25
 288:	f7 cf       	rjmp	.-18     	; 0x278 <main+0x34>
 28a:	00 e0       	ldi	r16, 0x00	; 0
 28c:	13 e0       	ldi	r17, 0x03	; 3
 28e:	f8 01       	movw	r30, r16
 290:	92 83       	std	Z+2, r25	; 0x02
 292:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_Render>
 296:	ff ef       	ldi	r31, 0xFF	; 255
 298:	23 ed       	ldi	r18, 0xD3	; 211
 29a:	80 e3       	ldi	r24, 0x30	; 48
 29c:	f1 50       	subi	r31, 0x01	; 1
 29e:	20 40       	sbci	r18, 0x00	; 0
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x58>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x62>
 2a6:	00 00       	nop
 2a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCD_Clear>
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
 2ae:	e3 ed       	ldi	r30, 0xD3	; 211
 2b0:	f0 e3       	ldi	r31, 0x30	; 48
 2b2:	91 50       	subi	r25, 0x01	; 1
 2b4:	e0 40       	sbci	r30, 0x00	; 0
 2b6:	f0 40       	sbci	r31, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0x6e>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x78>
 2bc:	00 00       	nop
 2be:	89 e2       	ldi	r24, 0x29	; 41
 2c0:	f8 01       	movw	r30, r16
 2c2:	82 83       	std	Z+2, r24	; 0x02
 2c4:	0f 2e       	mov	r0, r31
 2c6:	f6 e0       	ldi	r31, 0x06	; 6
 2c8:	ef 2e       	mov	r14, r31
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	ff 2e       	mov	r15, r31
 2ce:	f0 2d       	mov	r31, r0
 2d0:	f8 01       	movw	r30, r16
 2d2:	82 81       	ldd	r24, Z+2	; 0x02
 2d4:	99 91       	ld	r25, Y+
 2d6:	e8 2f       	mov	r30, r24
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	ea 5f       	subi	r30, 0xFA	; 250
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	90 83       	st	Z, r25
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	f8 01       	movw	r30, r16
 2e4:	82 83       	std	Z+2, r24	; 0x02
 2e6:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_Render>
 2ea:	ff ef       	ldi	r31, 0xFF	; 255
 2ec:	29 e6       	ldi	r18, 0x69	; 105
 2ee:	88 e1       	ldi	r24, 0x18	; 24
 2f0:	f1 50       	subi	r31, 0x01	; 1
 2f2:	20 40       	sbci	r18, 0x00	; 0
 2f4:	80 40       	sbci	r24, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0xac>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0xb6>
 2fa:	00 00       	nop
 2fc:	ce 15       	cp	r28, r14
 2fe:	df 05       	cpc	r29, r15
 300:	39 f7       	brne	.-50     	; 0x2d0 <main+0x8c>
 302:	ff cf       	rjmp	.-2      	; 0x302 <main+0xbe>

00000304 <__vector_5>:

}

ISR(PCINT2_vect)
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
	uint8_t pin_A;
	uint8_t pin_B;
	

	pin_A = (PINB & (1<<PB6));
 314:	83 b1       	in	r24, 0x03	; 3
 316:	80 74       	andi	r24, 0x40	; 64
	pin_B = (PINB & (1<<PB7));
 318:	93 b1       	in	r25, 0x03	; 3
 31a:	90 78       	andi	r25, 0x80	; 128
	
	if (pin_A == last_B)
 31c:	20 91 fe 02 	lds	r18, 0x02FE	; 0x8002fe <__data_end>
 320:	82 13       	cpse	r24, r18
 322:	05 c0       	rjmp	.+10     	; 0x32e <__vector_5+0x2a>
	{
		turn_Right();
		last_A = pin_A;
 324:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <last_A>
		last_B = pin_B;
 328:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <__data_end>
 32c:	08 c0       	rjmp	.+16     	; 0x33e <__vector_5+0x3a>
	}
	else if(pin_B == last_A)
 32e:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <last_A>
 332:	92 13       	cpse	r25, r18
 334:	04 c0       	rjmp	.+8      	; 0x33e <__vector_5+0x3a>
	{
		turn_Left();
		last_A = pin_A;
 336:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <last_A>
		last_B = pin_B;
 33a:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <__data_end>
	}

 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <_exit>:
 34e:	f8 94       	cli

00000350 <__stop_program>:
 350:	ff cf       	rjmp	.-2      	; 0x350 <__stop_program>
